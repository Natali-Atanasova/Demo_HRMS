@rendermode InteractiveServer
@page "/admin/employees"
@inject HttpClient Http
@inject AuthService Auth
@inject ProtectedLocalStorage Storage
@inject NavigationManager Navigation

<h3>All Employees</h3>

@if (Auth.IsAuthenticated)
{
    <div class="alert alert-info">
        DEBUG: Authenticated. Role: <b>@Auth.Role</b>
    </div>
}
else
{
    <div class="alert alert-warning">
        DEBUG: Not authenticated
    </div>
}

@if (!isLoaded)
{
    <p>Loading...</p>
}
else if (!Auth.IsAuthenticated || Auth.Role != "HR Admin")
{
    <div class="alert alert-danger">Access denied.</div>
}
else
{
    <button class="btn btn-success mb-3" @onclick="ShowAddModal">Add Employee</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Job Title</th>
                <th>Department</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in employees)
            {
                <tr>
                    <td>@e.FirstName @e.LastName</td>
                    <td>@e.Email</td>
                    <td>@e.JobTitle</td>
                    <td>@e.Department?.Name</td>
                    <td>@e.Salary</td>
                    <td>
                        @if (myEmployeeId != null && e.Id != myEmployeeId)
                        {
                            <button class="btn btn-primary btn-sm" @onclick="@(() => ShowEditModal(e))">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteEmployee(e.Id))">Delete</button>
                        }
                        else
                        {
                            <span class="text-muted">--</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingEmployee.Id == 0) ? "Add Employee" : "Edit Employee")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingEmployee" OnValidSubmit="SaveEmployee">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>First Name</label>
                            <InputText @bind-value="editingEmployee.FirstName" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label>Last Name</label>
                            <InputText @bind-value="editingEmployee.LastName" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label>Email</label>
                            <InputText @bind-value="editingEmployee.Email" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label>Job Title</label>
                            <InputText @bind-value="editingEmployee.JobTitle" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label>Salary</label>
                            <InputNumber @bind-value="editingEmployee.Salary" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label>Department Id</label>
                            <InputNumber @bind-value="editingEmployee.DepartmentId" class="form-control" />
                        </div>
                        <button type="submit" class="btn btn-success">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (!string.IsNullOrEmpty(newUserUsername) && !string.IsNullOrEmpty(newUserTempPassword))
{
    <div class="alert alert-info mt-3">
        <strong>New user created:</strong><br />
        Username: <b>@newUserUsername</b><br />
        Temporary Password: <b>@newUserTempPassword</b><br />
        Please provide these credentials to the new employee.
    </div>
}
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-warning mt-2">@message</div>
}

@code {
    private List<Employee> employees = new();
    private Employee editingEmployee = new();
    private bool showModal = false;
    private bool isLoaded = false;
    private string? message;
    private string? newUserUsername;
    private string? newUserTempPassword;
    private int? myEmployeeId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = (await Storage.GetAsync<string>("authToken")).Value;
            await Auth.InitializeAsync(token);

            if (Auth.IsAuthenticated)
            {
                try
                {
                    var profile = await Http.GetFromJsonAsync<Employee>("/employee/profile");
                    myEmployeeId = profile?.Id;
                }
                catch
                {
                    myEmployeeId = null;
                }
            }

            if (!Auth.IsAuthenticated || Auth.Role != "HR Admin")
            {
                isLoaded = true;
                StateHasChanged();
                return;
            }
            await LoadEmployees();
            isLoaded = true;
            StateHasChanged();
        }
    }

    private async Task LoadEmployees()
    {
        employees = await Http.GetFromJsonAsync<List<Employee>>("/admin/all") ?? new();
        message = null;
        newUserUsername = null;
        newUserTempPassword = null;
    }

    private void ShowAddModal()
    {
        editingEmployee = new();
        showModal = true;
        message = null;
    }

    private void ShowEditModal(Employee emp)
    {
        editingEmployee = new Employee
        {
            Id = emp.Id,
            FirstName = emp.FirstName,
            LastName = emp.LastName,
            Email = emp.Email,
            JobTitle = emp.JobTitle,
            Salary = emp.Salary,
            DepartmentId = emp.DepartmentId
        };
        showModal = true;
        message = null;
    }

    private void CloseModal()
    {
        showModal = false;
        message = null;
    }

    private async Task SaveEmployee()
    {
        message = null;
        if (editingEmployee.Id == 0)
        {
            var response = await Http.PostAsJsonAsync("/admin/employee", editingEmployee);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateEmployeeResult>();
                newUserUsername = result?.user?.username;
                newUserTempPassword = result?.user?.tempPassword;
                message = "Employee and user created!";
            }
            else
            {
                message = await response.Content.ReadAsStringAsync();
            }
        }
        else
        {
            var response = await Http.PutAsJsonAsync($"/admin/employee/{editingEmployee.Id}", editingEmployee);
            message = response.IsSuccessStatusCode ? "Employee updated!" : await response.Content.ReadAsStringAsync();
        }

        showModal = false;
        await LoadEmployees();
    }

    private async Task DeleteEmployee(int id)
    {
        var response = await Http.DeleteAsync($"/admin/employee/{id}");
        if (response.IsSuccessStatusCode)
        {
            message = "Employee deleted.";
            await LoadEmployees();
        }
        else
        {
            message = await response.Content.ReadAsStringAsync();
        }
    }

    public class Employee
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? JobTitle { get; set; }
        public decimal Salary { get; set; }
        public int DepartmentId { get; set; }
        public Department? Department { get; set; }
    }
    public class Department
    {
        public int Id { get; set; }
        public string? Name { get; set; }
    }
    public class CreateEmployeeResult
    {
        public Employee? employee { get; set; }
        public NewUserResult? user { get; set; }
    }
    public class NewUserResult
    {
        public string? username { get; set; }
        public string? tempPassword { get; set; }
    }
}
